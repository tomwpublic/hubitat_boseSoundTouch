/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 */

import groovy.transform.Field

definition(
    name: "Bose SoundTouch Discovery",
    namespace: "tomw",
    author: "tomw",
    description: "",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "")

preferences
{
    page(name: "mainPage1")
    page(name: "mainPage2")
    page(name: "mainPage2b")
}

def mainPage1()
{
    dynamicPage(name: "mainPage1", title: "", install: false, uninstall: true)
    {
        if(null == atomicState.devices)
        {
            atomicState.devices = [:]
        }
        
        section
        {
            href(page: "mainPage2", title: "<b>Begin discovery process</b>", description: "Discover Bose SoundTouch devices on your local network.", params: [runDiscovery : true])
            input name: "discoveryTimeout", type: "number", title: "Discovery timeout (default 5 sec)", defaultValue: 5, range: "3-20", required: true, width: 2
        }
    }
}

def mainPage2(params)
{
    dynamicPage(name: "mainPage2", title: "", install: true, uninstall: true)
    {
        if(params.runDiscovery)
        {
            // clear devices list
            atomicState.devices = [:]
            // subscribe to receive upnp events
            subscribe(location, null, locationHandler, [filterEvents:false])
            // upnp request
            sendHubCommand(new hubitat.device.HubAction("lan discovery urn:schemas-upnp-org:device:MediaRenderer:1", hubitat.device.Protocol.LAN))        
            // limit wait to 3sec minimum
            pauseExecution(1000 * ((discoveryTimeout < 3) ? 3 : discoveryTimeout.toInteger()))
            // stop listening        
            unsubscribe(location)
        }
        
        section
        {
            paragraph "<b>Discovered devices:</b> ${atomicState.devices}"
        }
        
        section
        {
            href(page: "mainPage1", title: "<b>Retry discovery process</b>", description: "")
        }
        
        section
        {
            input name: "retainExistingDevices", type: "bool", title: "Retain existing devices? (recommended)", defaultValue: true, required: true
            input name: "deviceList", type: "enum", title: "Select devices to create", options: atomicState.devices, required: false, multiple: true
            input name: "enableLogging", type: "bool", title: "Enable debug logging?", defaultValue: false, required: true
        }
    }
}

@Field String discoverySync = ""

def logDebug(msg)
{
    if(enableLogging)
    {
        log.debug "${msg}"
    }
}

def installed()
{
    def child
    for(device in deviceList)
    {
        child = getChildDevice(device)
        if(child)
        {
            // if this child exists, either retainExistingDevices is set
            //   or something unexpected happened.  regardless, we're done.
            logDebug("skipping creation for existing device: ${device}")
            continue
        }
        
        child = addChildDevice("tomw", "Bose SoundTouch Device", device, [isComponent: true, name: "Bose SoundTouch Device", label: atomicState.devices[device]])
        if(child)
        {
            logDebug("creating device: ${device}")
            child.updateSetting("IP_address", device)
            child.configure()
        }
    }    
}

def uninstalled()
{   
    deleteChildren()
}

def updated()
{
    unsubscribe()
    
    if(!retainExistingDevices)
    {
        deleteChildren()
    }
    
    installed()
}

def deleteChildren()
{
    for(child in getChildDevices())
    {
        deleteChildDevice(child.getDeviceNetworkId())
    }
}

def locationHandler(evt)
{
    //logDebug("evt = ${evt}")
    //logDebug("parseLanMessage(evt.description) = ${parseLanMessage(evt.description)}")
    //logDebug("parseLanMessage(evt.description).networkAddress = ${convertHexToIP(parseLanMessage(evt.description).networkAddress)}")
    //logDebug("XML = ${httpGetExec(convertHexToIP(parseLanMessage(evt.description).networkAddress), parseLanMessage(evt.description).ssdpPath)}")
    
    pauseExecution(new Random().nextInt(1000))
    
    def resp = httpGetExec(convertHexToIP(parseLanMessage(evt.description).networkAddress), convertHexToInt(parseLanMessage(evt.description).deviceAddress), parseLanMessage(evt.description).ssdpPath)
    
    logDebug("inspecting device: ${resp?.device?.modelName.toString()}")
    // Filter on SoundTouch model names
    if(resp?.device?.modelName.toString().contains("SoundTouch") || resp?.device?.modelName.toString().contains("Lifestyle"))
    {
        synchronized(discoverySync)
        {
            def tmpDevs = atomicState.devices
            tmpDevs.put(convertHexToIP(parseLanMessage(evt.description).networkAddress).toString(), resp.device.friendlyName.toString())
            atomicState.devices = tmpDevs
        }
    }
}

private Integer convertHexToInt(hex)
{
    return Integer.parseInt(hex,16)
}

private String convertHexToIP(hex)
{
    return [convertHexToInt(hex[0..1]),convertHexToInt(hex[2..3]),convertHexToInt(hex[4..5]),convertHexToInt(hex[6..7])].join(".")
}

def getBaseURI(devIP, devPort)
{
    baseUri = "http://" + devIP
    if(null != devPort)
    {
        baseUri += (":" + devPort)
    }
    
    return baseUri
}

def httpGetExec(devIP, devPort, suffix)
{
    logDebug("httpGetExec(${devIP}:${devPort}, ${suffix})")
    
    try
    {
        def getString = getBaseURI(devIP, devPort) + suffix
        httpGet([uri: getString.replaceAll(' ', '%20'), contentType: "text/xml", requestContentType: "text/xml"])
        { resp ->
            if (resp.data)
            {
                //logDebug("resp.data = ${resp.data}")
                return resp.data
            }
        }
    }
    catch (Exception e)
    {
        log.warn "httpGetExec() failed: ${e.message}"
    }
}
